{"version":3,"sources":["logo.svg","components/NavbarComp.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavbarComp","react_default","a","createElement","className","href","src","logo","width","height","alt","Component","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","baseMark","text","handler","id","onChange","rows","value","style","marked","setOptions","breaks","Previewer","renderer","Renderer","link","title","concat","dangerouslySetInnerHTML","__html","mark","App","markdown","changeMark","bind","assertThisInitialized","ev","target","setState","NavbarComp_NavbarComp","Editor_Editor","Previewer_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bb2f520.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nexport default class NavbarComp extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">\r\n                    <img src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\r\n                        Markdown previewer\r\n                </a>\r\n            </nav>\r\n                );\r\n            }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Editor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            baseMark: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\nconst baseMark = `# Welcome to my React Markdown Previewer!\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n        \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n    \r\n\\`\\`\\`\r\n// this is multi-line code:\r\n    \r\nfunction anotherExample(firstLine, lastLine) {\r\nif (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n}\r\n}\r\n\\`\\`\\`\r\n    \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n    - Some are bulleted.\r\n    - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n\r\n        //this.setState(({ baseMark }));\r\n\r\n        if (!this.props.text) {\r\n            this.props.handler(baseMark);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        //const mark = (this.props.text) ? this.props.text : this.state.baseMark;\r\n        return (\r\n            <div className=\"card\">\r\n                <h5 className=\"card-header\">Editor</h5>\r\n                <div className=\"card-body\">\r\n                    <textarea id=\"editor\" onChange={this.props.handler} className=\"form-control\" rows=\"3\" value={this.props.text} style={{ height: '50vh' }}></textarea>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport marked from 'marked';\r\n\r\nmarked.setOptions({\r\n    breaks: true,\r\n  });\r\n\r\n  \r\nexport default class Previewer extends Component{\r\n\r\n    render(){\r\n        const renderer = new marked.Renderer();\r\n        renderer.link = function (href, title, text) {\r\n            return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\r\n        }\r\n        \r\n        return(\r\n            <div className=\"card\">\r\n                <h5 className=\"card-header\">Previewer</h5>\r\n                <div id='preview' className=\"card-body\"  dangerouslySetInnerHTML={{__html: marked(this.props.mark, { renderer: renderer })}}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport NavbarComp from './components/NavbarComp';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      markdown:''\n    }\n    this.changeMark = this.changeMark.bind(this);\n  }\n\n  changeMark(ev){\n    if(ev.target){\n      this.setState(({ markdown : ev.target.value}));\n    }else {\n      this.setState(({ markdown : ev }));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavbarComp />\n        <div className=\"container-fluid\">\n          <div className=\"row align-items-center justify-content-center mt-5 mb-5\">\n            <div className=\"col-xs-12 col-md-7\">\n              <Editor text={this.state.markdown} handler={this.changeMark} />\n            </div>\n            <div className=\"col-xs-12 col-md-10 mt-5\">\n              <Previewer mark={this.state.markdown} />\n            </div>\n          </div>  \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}